# 项目架构文档

## 1. 项目概述
该项目是一个视频播放应用，使用 Next.js 框架构建，支持视频播放、用户显示和剧集列表展示。项目使用了 `DPlayer` 作为视频播放器，并通过 API 获取视频、剧集和用户数据。

## 2. 主要组件

### 2.1 `VideoPage`
- **路径**: `src/app/[id]/[ep]/page.tsx`
- **功能**: 
  - 负责展示视频播放器和相关信息。
  - 从 API 获取视频数据（标题、URL、封面）。
  - 渲染 `VideoPlayer`、`UserAvatar` 和 `EpisodeList` 组件。
- **依赖**:
  - `VideoPlayer`: 用于播放视频。
  - `UserAvatar`: 显示用户头像。
  - `EpisodeList`: 显示剧集列表。

### 2.2 `VideoPlayer`
- **路径**: `src/components/VideoPlayer.tsx`
- **功能**:
  - 初始化并管理视频播放器。
  - 显示视频封面（如果存在）。
  - 处理视频播放和切换视频的逻辑。
- **属性**:
  - `initialUrl`: 初始视频 URL。
  - `title`: 视频标题。
  - `cover`: 视频封面图 URL。
  - `id`: 视频 ID。
- **依赖**:
  - 使用 `DPlayer` 作为视频播放库。

### 2.3 `UserAvatar`
- **路径**: `src/components/UserAvatar.tsx`
- **功能**:
  - 显示用户的头像信息。
  - 根据用户登录状态显示不同的内容。
  - 点击头像可跳转到用户页面或登录页面。
- **依赖**: 无直接依赖。

### 2.4 `EpisodeList`
- **路径**: `src/components/EpisodeList.tsx`
- **功能**:
  - 显示剧集列表，并允许用户选择不同的剧集进行播放。
  - 根据用户登录状态获取可访问的剧集信息。
- **属性**:
  - `updateVideoUrl`: 更新视频 URL 的回调函数。
  - `id`: 视频 ID
  - `ep`: 视频 集数
- **依赖**: 无直接依赖。

### 2.5 `SignIn`
- **路径**: `src/app/auth/signin/page.tsx`
- **功能**:
  - 用户登录界面，支持用户名和密码登录。
  - 提供一键注册功能，自动生成用户名和密码并注册。
- **依赖**:
  - 使用 `next-auth` 进行身份验证。

### 2.6 `SignUp`
- **路径**: `src/app/auth/signup/page.tsx`
- **功能**:
  - 用户注册界面，支持用户名和密码注册。
  - 提供表单验证功能。
- **依赖**: 无直接依赖。

### 2.7 `PaymentOptions`
- **路径**: `src/components/EpisodeList.tsx`
- **功能**:
  - 显示支付选项，允许用户选择不同的支付方式解锁剧集。
- **依赖**: 无直接依赖。

## 3. 数据流
- **数据获取**: 
  - `VideoPage` 组件通过 `fetchVideoData` 函数从 API 获取视频数据。
  - 数据包括视频的标题、URL 和封面图。
  
- **状态管理**:
  - `VideoPage` 使用 `useState` 管理视频数据的状态。
  - `VideoPlayer` 组件使用 `useState` 管理当前播放的视频 URL。
  - `UserAvatar` 组件使用 `useState` 管理用户信息和登录状态。
  - `EpisodeList` 组件使用 `useState` 管理剧集信息和用户登录状态。
  - `PaymentOptions` 组件使用 `useState` 管理支付选项的显示状态。

## 4. 组件间关系
- `VideoPage` 是主组件，负责加载和渲染其他子组件。
- `VideoPlayer` 依赖于 `VideoPage` 提供的 `initialUrl`、`title` 和 `cover` 属性。
- `EpisodeList` 依赖于 `VideoPage` 提供的 `id` 和 `updateVideoUrl` 函数，以便在用户选择剧集时更新视频 URL。
- `UserAvatar` 组件独立于其他组件，负责用户头像的显示和用户状态的管理。
- `SignIn` 和 `SignUp` 组件独立于其他组件，负责用户登录和注册。

## 5. 支付逻辑
- **支付选项 1**: 扫码支付
  - 调用扫码支付 API，处理支付逻辑。
  
- **支付选项 2**: 余额支付
  - 检查用户余额，扣除相应金额，更新用户对剧集的解锁权限。
  
- **支付选项 3**: 全集解锁
  - 扣除用户余额，更新该视频下所有剧集的解锁权限。
  
- **支付选项 4**: VVVIP 访问
  - 扣除用户余额，授予 VVVIP 权限，并在一定时间后撤销权限。

## 6. 其他信息
- **样式**: 使用 Tailwind CSS 进行样式管理。
- **视频播放器**: 使用 `DPlayer` 进行视频播放，支持多种功能，如播放速度调整、热键支持等。

## 7. 未来扩展
- 增加评论功能，让用户可以对视频进行评论和评分。

---

### 数据库中可能要存储的信息
1. **用户信息**:
   - 用户 ID
   - 用户名
   - 密码（加密存储）
   - 账户余额
   - 注册时间
   - 充值记录
   - 会员等级(由充值总金额决定)

2. **视频信息**:
   - 视频 ID
   - 视频标题
   - 视频 URL
   - 封面图 URL
   - 创建时间

3. **剧集信息**:
   - 剧集 ep
   - 所属视频 ID
   - 剧集标题
   - 免费的集数

4. **用户权限**:
   - 用户 ID
   - 剧集 ID
   - 解锁状态（是否可以观看）

5. **支付记录**:
   - 记录 ID
   - 用户 ID
   - 支付金额
   - 支付时间
   - 支付方式

6. **VVVIP 访问记录**:
   - 用户 ID
   - 开始时间
   - 结束时间

7.**定价策略**:
   -剧目ID
   -单集价格
   -余额支付单机价格
   -余额支付全集价格
   -VVVIP限时价格，不同时长/价格（global）


